pipeline {
    agent any
    tools {
       maven 'M2_HOME'
    }
    environment{
        VERSION = "${env.BUILD_ID}"
    }
    stages {
        stage('pull source code') {
            steps {
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/sudhakarbastawade2303/spring-boot-war-example.git']])
            }
        }
        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('Static Code Analysis') {
            environment {
            SONAR_URL = "http://3.7.71.116:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_AUTH_TOKEN')]) {
                sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
                timeout(time: 1, unit: 'HOURS') {
                    def qg = waitForQualityGate()
                    if (qg.status != 'OK') {
                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                    }
                }
        }
        stage("docker build & docker push"){
            steps{
                script{
                    withCredentials([string(credentialsId: 'dockerhub-token', variable: 'docker_password')]) {
                             sh '''
                                docker build -t sudhakarbastawade/helm-deploy:${VERSION} .
                                docker login -u sudhakarbastawade -p $docker_password
                                docker push sudhakarbastawade/helm-deploy:${VERSION}
                                docker rmi sudhakarbastawade/helm-deploy:${VERSION}
                            '''
                    }
                }
            }
        }
        stage('Deploying application on k8s cluster') {
            steps {
               script{
                   // withCredentials([kubeconfigFile(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
		       withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
		       dir('kubernetes/') {
                          sh 'helm upgrade --install --set image.repository="sudhakarbastawade/helm-deploy" --set image.tag="${VERSION}" myjavaapp myapp/ ' 
                        }
                    }
               }
            }
        }
        
    }
}
